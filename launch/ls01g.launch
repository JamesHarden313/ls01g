from launch import LaunchDescription
from launch_ros.actions import Node
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration

def generate_launch_description():
    # Declare launch arguments
    inverted_arg = DeclareLaunchArgument(
        'inverted',
        default_value='false',
        description='Set to true if 0 degree direction aligns with serial cable'
    )

    # Define the ls01g node
    ls01g_node = Node(
        package='ls01g',
        executable='ls01g_node',  # Adjust this if your executable name differs
        name='ls01g',
        output='screen',
        parameters=[
            {'scan_topic': 'scan'},           # Laser data topic name
            {'laser_link': 'base_laser_link'}, # Laser frame
            {'serial_port': '/dev/laser'},     # Serial port for the radar
            {'zero_as_max': False},           # True: undetected areas become max value
            {'min_as_zero': False},           # True: undetected areas = 0, False: infinity
            {'angle_disable_min': -1},        # Angle range (degrees) to disable (set to 0)
            {'angle_disable_max': -1},
            {'inverted': LaunchConfiguration('inverted')}  # Use launch argument
        ]
    )

    # Uncomment and adjust if you want to include RViz
    # rviz_node = Node(
    #     package='rviz2',
    #     executable='rviz2',
    #     name='rviz',
    #     arguments=['-d', '/path/to/your/rviz_config.rviz']
    # )

    # Create and return the launch description
    return LaunchDescription([
        inverted_arg,
        ls01g_node,
        # rviz_node  # Uncomment to include RViz
    ])
